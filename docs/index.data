os.print("> Loading shell...");
var shell = new (os.run('/bin/shell.js'))(false); //false so that exec doesn't run automatically (it's in the bottom of the shell.js)
os.print(">> JsOS Shell >>");
shell.exec();(function(args) {
	var filename = args.join(" ");
	var contents = os.read(shell.resolve(filename));
	if(typeof(contents) != "undefined") os.print(contents);
	else throw filename + " can't be read";
})(function(args) {
	var folder = args.join(" ");
	if(!shell.chdir(folder)) throw folder + " can't be cd'd into";
})(function(args) {
	if(args.length >= 2) {
		var contents = os.read(shell.resolve(args[0]))
		if(contents) {
			var destination = shell.resolve(args[1])
			if(os.exists(destination) === "directory") destination += "/" + args[0].split("/")[-1];
			if(!os.write(destination, contents)) throw destination + " can't be written to";
			
		} else throw filename + " can't be read";
		
	} else throw "Not enough arguments";
})(function(args) {
	os.print(args.join(" "));
})(function(args) {
	if(args[0]) {
		var exists = os.exists(shell.resolve(args[0]));
		if(exists) os.print(args[0] + " is a " + exists);
		else throw args[0] + " doesn't exist";
	}
})(function(args) {
	os.print("== Javascript interpreter ==\nThis terminal uses the same global object as the rest of the program, so you can totally break stuff\nAnyways, type 'exit' to return");
	
	var line; //just initialise it here because we'll always need it
	while(true) {
		line = os.getline("<js> ").trim();
		if(line === "exit") return;
		try {
			os.print("< " + eval(line));
		} catch(error) {
			os.print("> ERROR => " + error);
		}
	}
})(function(args) {
	var folder = shell.resolve(args.join(" "));
	var result = os.listdir(folder);
	if(typeof(result) === "undefined") throw folder + " is not a directory";
	result.forEach(function(e) {
		os.print(e);
	});
})(function(args) {
	if(args[0]) {
		if(!os.mkdir(shell.resolve(args[0]))) throw args[0] + " couldn't be created";
	}
})(function(args) {
	if(args[0]) {
		if(args[0] === "-r") {
			var resolved = shell.resolve(args[1]);
			if(os.exists(resolved) === "directory") { //go through the dir
		
				var recurse_dirs = function(dir) {
					var dir_contents = os.listdir(dir); //returns an array of files
					dir_contents.some(function(e) {
						var current = dir + "/" + e;
						var type = os.exists(current);
					
						switch(type) {
							case "directory":
								recurse_dirs(current);
								os.rmdir(current);
								return false;
							case "file":
								if(!os.remove(current)) {
									throw current + " couldn't be removed";
									return true;
								}
								return false;
							default: //kill if undefined
								return true;
						}
					});
				}
			}
			
			recurse_dirs(resolved);
			os.rmdir(resolved);
			
		} else {
			//os.print(shell.resolve(args[0]));
			if(!os.remove(shell.resolve(args[0]))) throw args[0] + " couldn't be removed";
		}
	}
})(function(args) {
	if(args[0]) {
		if(!os.rmdir(shell.resolve(args[0]))) throw args[0] + " couldn't be removed (directory probably not empty)");
	}
})(function(args) {
	const self = this;
	
	self.run = true;
	self.current_dir = "/";
	self.path = "/bin";
	self.startup_time = Date.now();
	
	self.exit = function() {
		self.run = false;
	}
	
	self.resolve = function(path) {
		if(path[0] == "/") return path;
		return this.current_dir + "/" + path;
	}
	
	self.chdir = function(path) {
		var result = os.chdir(self.resolve(path));
		if(result) self.current_dir = result;
		return result;
	}
	
	self.uptime = function() {
		return Math.round((Date.now() - self.startup_time)/1000);
	}
	
	self.printErr = function(file, error) {
		os.print("> ERROR [" + file + "] => " + error);
	}
	
	self.exec = function() {
		while(this.run) {
			var line = os.getline(self.current_dir.replace(/^\/+|\/+$/gm, "") + "> ").trim(); //regex for removing excess '/'
			if(line === "") continue;
			
			line = line.match(/(?=\S)[^"\s]*(?:"[^\\"]*(?:\\[\s\S][^\\"]*)*"[^"\s]*)*/g); // stolen from https://stackoverflow.com/a/40120309
			for(var i = 0; i < line.length; i++) if(line[i][0] === "\"" && line[i][line[i].length-1] === "\"") line[i] = line[i].slice(1, -1);
			
			if(line[0] === "exit") {
					self.run = false;
					continue;
			}
			
			var r;
			var args = line.slice(1);
			var filename = line[0];
			if(filename.slice(-3) !== ".js") filename = filename + ".js";
			filename = "/" + filename;
			
			var paths = self.path.split(":");
			paths = [self.current_dir].concat(paths); //Add current dir to start of paths
			
			for(var i = 0; i < paths.length; i++) {
				r = os.run(paths[i] + filename);
				if(r) {
					if(typeof(r) === "function") {
						try {
							self.script_name = paths[i] + filename;
							r(args);
							self.script_name = undefined;
						} catch(err) {
							self.printErr(paths[i] + filename, err);
						}
					} else self.printErr(paths[i] + filename, r);
					break;
				}
			}
			
			if(r) continue;
			os.print("'" + filename + "' is not a command");
		}
		
		return "Shell Terminated";
	}
	
	if(args != false) self.exec();
})(function(args) {
	if(args[0]) {
		if(!os.write(shell.resolve(args[0]), "")) throw args[0] + " can't be written to";
	}
})(function(args) {
	os.print(shell.uptime() + "s");
})